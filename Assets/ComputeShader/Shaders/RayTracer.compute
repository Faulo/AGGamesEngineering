// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;
float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;


static const float INF = 1000000;

struct Ray
{
	float3 origin;
	float3 direction;
};
Ray CreateRay(float3 og, float3 dir)
{
	Ray ray;
	ray.origin = og;
	ray.direction = dir;
	return ray;
}
struct RayHit
{
	float3 position;
	float distance;
	float3 normal;
};
RayHit CreateRayHit()
{
	RayHit hit;
	hit.position = float3(0, 0, 0);
	hit.distance = INF;
	hit.normal = float3(0, 0, 0);
	return hit;
}

void Raytrace(uint3 id);
void IntersectSphere(Ray ray, inout RayHit hit, float4 sphere);
RayHit Trace(Ray ray);
float4 Shade(inout Ray ray, RayHit hit);

[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    // TODO: insert actual code here!
	Raytrace(id);
}

Ray CreateCameraRay(float2 uv)
{
    // Transform the camera origin to world space
	float3 origin = mul(_CameraToWorld, float4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;

    // Invert the perspective projection of the view-space position
	float3 direction = mul(_CameraInverseProjection, float4(uv, 0.0f, 1.0f)).xyz;
    // Transform the direction from camera to world space and normalize
	direction = mul(_CameraToWorld, float4(direction, 0.0f)).xyz;
	direction = normalize(direction);

	return CreateRay(origin, direction);
}

void Raytrace(uint3 id)
{

	uint width, height;
	Result.GetDimensions(width, height);

	float2 uv = float2((id.xy + float2(0.5f, 0.5f)) / float2(width, height) * 2.0f - 1.0f);

	Ray ray = CreateCameraRay(uv);
	RayHit hit = Trace(ray);

	float4 color = Shade(ray, hit);
	
	Result[id.xy] = color;
}

RayHit Trace(Ray ray)
{
	RayHit hit = CreateRayHit();
	for (int x = 0; x < 10; x++)
	{
		for (int y = 0; y < 10; y++)
		{
			for (int z = 0; z < 10; z++)
			{
				IntersectSphere(ray, hit, float4(x, y, z, 1));
			}
		}
	}
	return hit;
}

void IntersectSphere
	(Ray
	ray, inout
	RayHit hit, float4 sphere)
{
    // Calculate distance along the ray where the sphere is intersected
	float3 d = ray.origin - sphere.xyz;
	float p1 = -dot(ray.direction, d);
	float p2sqr = p1 * p1 - dot(d, d) + sphere.w * sphere.w;
	if (p2sqr < 0)
		return;
	float p2 = sqrt(p2sqr);
	float t = p1 - p2 > 0 ? p1 - p2 : p1 + p2;
	if (t > 0 && t < hit.distance)
	{
		hit.distance = t;
		hit.position = ray.origin + t * ray.direction;
		hit.normal = normalize(hit.position - sphere.xyz);
	}
}

float4 Shade(inout Ray ray, RayHit hit)
{
	if (hit.distance < INF)
	{
		return float4(hit.normal * 0.5f + 0.5f, 1.0f);
	}
	else
	{
		return float4(0, 0, 0, 1);
	}
}
		